{"version":3,"sources":["components/NavBar/index.js","components/Instructions/index.js","components/CardDiv/index.js","components/Card/index.js","components/CardGame/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","src","alt","href","score","top","id","Instructions","CardDiv","children","Card","console","log","style","backgroundImage","concat","img","onClick","cardClick","CardGame","state","data","cardId","guessBool","upData","_this","map","item","newItem","Object","objectSpread","click","correctGuess","incorrectGuess","Data","tempScore","tempTop","Math","max","setState","fisherYatesShuffle","initialData","i","length","j","floor","random","_ref","element","this","_this2","components_NavBar","components_Instructions","components_CardDiv","card","components_Card","key","Component","App","components_CardGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gjKAoBeA,MAjBf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,yCAAyCC,IAAI,GAAGF,UAAU,cACnEH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,8BAGHN,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASJ,EAAMQ,OAA1C,WAA+DP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOJ,EAAMS,MAC5FR,EAAAC,EAAAC,cAAA,MAAIO,GAAG,iBAAgBT,EAAAC,EAAAC,cAAA,OAAKE,IAAI,2BAA4BC,IAAI,GAAGF,UAAU,kBAA7E,MAAsGH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+BAA+BC,IAAI,GAAGF,UAAU,8BCChKO,MAZf,WACI,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,uCAAuCC,IAAI,GAAGI,GAAG,YAC1DT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,4DAEJF,EAAAC,EAAAC,cAAA,OAAKO,GAAG,0BCAHE,MARjB,SAAiBZ,GACb,OACAC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mCAAmCC,IAAI,GAAGF,UAAU,eAC7DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,kBCUvBC,MAdf,SAAcd,GAEV,OADAe,QAAQC,IAAIhB,GAERC,EAAAC,EAAAC,cAAA,OACAc,MAAO,CAAEC,gBAAe,QAAAC,OAAUnB,EAAMoB,IAAI,GAApB,OACxBhB,UAAS,OACTiB,QAAS,WACLN,QAAQC,IAAIhB,EAAMU,IAClBV,EAAMsB,UAAUtB,EAAMU,QCmFnBa,6MAtFXC,MAAQ,CACJhB,MAAO,EACPC,IAAK,EACLgB,UAMJH,UAAY,SAAAI,GACR,IAAIC,GAAY,EACVC,EAASC,EAAKL,MAAMC,KAAKK,IAAI,SAAAC,GAC/B,IAAMC,EAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAQF,GAOrB,OANIC,EAAQtB,KAAOgB,IACZM,EAAQG,QACXH,EAAQG,OAAQ,EAChBR,GAAY,IAGTK,IAETL,EACIE,EAAKO,aAAaR,GAClBC,EAAKQ,eAAeT,MAG9BQ,aAAe,SAAAE,GACX,IAAM9B,EAAQqB,EAAKL,MAAMhB,MACnBC,EAAMoB,EAAKL,MAAMf,IACjB8B,EAAY/B,EAAQ,EACpBgC,EAAUC,KAAKC,IAAIH,EAAW9B,GAEpCoB,EAAKc,SAAS,CACVnC,MAAO+B,EACP9B,IAAK+B,EACLf,KAAMI,EAAKe,mBAAmBN,QAGtCD,eAAiB,SAAAZ,GACbI,EAAKc,SAAS,CACVnC,MAAO,EACPiB,KAAMI,EAAKgB,YAAYpB,QAG/BmB,mBAAqB,SAAAnB,GACjB,IAAK,IAAIqB,EAAIrB,EAAKsB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACtC,IAAME,EAAIP,KAAKQ,MAAMR,KAAKS,UAAYJ,EAAI,IADJK,EAEjB,CAAC1B,EAAKuB,GAAIvB,EAAKqB,IAAnCrB,EAAKqB,GAFgCK,EAAA,GAE5B1B,EAAKuB,GAFuBG,EAAA,GAI1C,OAAO1B,KAGXoB,YAAc,SAAApB,GACV,IAAMoB,EAAcpB,EAAKK,IAAI,SAAAsB,GAAO,OAAAnB,OAAAC,EAAA,EAAAD,CAAA,GAC7BmB,EAD6B,CAEhCjB,OAAO,MAGX,OAAON,EAAKe,mBAAmBC,uFAnD/BQ,KAAKV,SAAS,CAAElB,KAAM4B,KAAKT,mBAAmBS,KAAK7B,MAAMC,yCA2DpD,IAAA6B,EAAAD,KACL,OACIpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAQ/C,MAAO6C,KAAK7B,MAAMhB,MAAOC,IAAK4C,KAAK7B,MAAMf,MACjDR,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,KACKJ,KAAK7B,MAAMC,KAAKK,IAAI,SAAA4B,GAAI,OACrBzD,EAAAC,EAAAC,cAACwD,EAAD,CACIC,IAAKF,EAAKhD,GACVA,GAAIgD,EAAKhD,GACTU,IAAKsC,EAAKtC,IACVE,UAAWgC,EAAKhC,uBA9ErBuC,aCCRC,MAJf,WACE,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5c9ea49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return(\r\n        <nav className=\"navbar\" >\r\n            <ul>\r\n                <li className=\"gameTitle\">\r\n                    <span className=\"titleSpan\">\r\n                   <img src=\"assets/Images/Blitzcrank-Riot-icon.png\" alt=\"\" className=\"blitzIcon\"></img>\r\n                   <a href=\"/\">Blitzcranks Memory Hook!</a>\r\n                   </span>\r\n                </li>\r\n                <li>Score: <text className=\"score\">{props.score}</text> | Top: <text className=\"top\">{props.top}</text></li>\r\n                <li id=\"difficultyBox\"><img src=\"assets/Images/Bronze.png\"  alt=\"\" className=\"difficulty ez\"></img> | <img src=\"assets/Images/Challenger.png\" alt=\"\" className=\"difficulty hard\"></img></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Instructions() {\r\n    return (\r\n        <div className=\"instructions\">\r\n            <img src=\"assets/Images/blitzcrank-pngtrim.png\" alt=\"\" id=\"tfEther\"></img>\r\n            <div className=\"instructionText\">\r\n                <h1>Instructions:</h1>\r\n                <h2>Click only the cards you haven't clicked yet.</h2>\r\n            </div>\r\n            <div id=\"spacer\"></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Instructions;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CardDiv(props) {\r\n    return ( \r\n    <main className=\"CardDiv\">\r\n      <img src=\"assets/Images/Blitz_animated.gif\" alt=\"\" className=\"blitzCrank\"></img>\r\n      <div className=\"wrapper\">{props.children}</div>\r\n    </main>);\r\n  }\r\n  \r\n  export default CardDiv;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    console.log(props);\r\n    return (\r\n        <div\r\n        style={{ backgroundImage: `url(\"${props.img[0]}\")`}}\r\n        className={`card`}\r\n        onClick={() => {\r\n            console.log(props.id);\r\n            props.cardClick(props.id)\r\n        }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport NavBar from \"../NavBar\";\r\nimport Instructions from \"../Instructions\";\r\nimport data from \"../../champions.json\"; //Data seems shorter than Champions or I would keep the name ...\r\nimport CardDiv from \"../CardDiv\";\r\nimport Card from \"../Card\";\r\n\r\nclass CardGame extends Component {\r\n    state = {\r\n        score: 0, \r\n        top: 0, \r\n        data\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ data: this.fisherYatesShuffle(this.state.data)});\r\n    }\r\n    cardClick = cardId => {\r\n        let guessBool = false;\r\n        const upData = this.state.data.map(item => {\r\n            const newItem = { ...item };\r\n            if (newItem.id === cardId) {\r\n              if (!newItem.click) {\r\n                newItem.click = true;\r\n                guessBool = true;\r\n              }\r\n            }\r\n            return newItem;\r\n          });\r\n          guessBool\r\n            ? this.correctGuess(upData)\r\n            : this.incorrectGuess(upData);\r\n        };\r\n    \r\n    correctGuess = Data => {\r\n        const score = this.state.score;\r\n        const top = this.state.top;\r\n        const tempScore = score + 1;\r\n        const tempTop = Math.max(tempScore, top);\r\n\r\n        this.setState({\r\n            score: tempScore,\r\n            top: tempTop,\r\n            data: this.fisherYatesShuffle(Data)\r\n        });\r\n    }\r\n    incorrectGuess = data => {\r\n        this.setState({\r\n            score: 0,\r\n            data: this.initialData(data)\r\n        })\r\n    }\r\n    fisherYatesShuffle = data => {\r\n        for (let i = data.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [data[i], data[j]] = [data[j], data[i]];\r\n        }\r\n        return data;\r\n    }\r\n\r\n    initialData = data => {\r\n        const initialData = data.map(element => ({\r\n            ...element,\r\n            click: false\r\n        }));\r\n\r\n        return this.fisherYatesShuffle(initialData);\r\n\r\n    }\r\n\r\n    // cardClick = cardID => {\r\n\r\n    // }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <NavBar score={this.state.score} top={this.state.top}/>\r\n                <Instructions />\r\n                <CardDiv>\r\n                    {this.state.data.map(card =>(\r\n                        <Card\r\n                            key={card.id}\r\n                            id={card.id}\r\n                            img={card.img}\r\n                            cardClick={this.cardClick}\r\n                        />\r\n                    ))}\r\n                </CardDiv>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CardGame;\r\n","import React, { Component } from 'react';\nimport CardGame from './components/CardGame';\n\n\nfunction App() {\n  return <CardGame />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}